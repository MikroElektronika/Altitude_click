{*
Example for Altitude Click

    Date          : Oct 2018.
    Author        : Nenad Filipovic

Test configuration PIC32 :
    
    MCU                : P32MX795F512L
    Dev. Board         : EasyPIC Fusion v7
    PIC32 Compiler ver : v4.0.0.0

---

Description :

The application is composed of three sections :

- System Initialization - Initializes GPIO, I2C and LOG structures, 
     set INT pin as input and CS pin as input.
- Application Initialization - Initialization driver enable's - I2C,
     set default Altitude configuration and start write log.
- Application Task - (code snippet) This is a example which demonstrates the use of Altitude Click board.
     Measured and calculate altitude ( meters ) from sensor,
     results are being sent to the Usart Terminal where you can track their changes.
     All data logs on usb uart for aproximetly every 5 sec.

Additional Functions :

- UART
- Conversions

*}
program Click_Altitude_PIC32;

uses Click_Altitude_types, Click_Altitude_config;

var
    altitude : real; 
    logText : array[50] of char; 
    
procedure systemInit(); 
begin

    mikrobus_gpioInit(_MIKROBUS1, _MIKROBUS_INT_PIN, _GPIO_INPUT); 
    mikrobus_gpioInit(_MIKROBUS1, _MIKROBUS_CS_PIN, _GPIO_OUTPUT); 
    mikrobus_i2cInit(_MIKROBUS1, @_ALTITUDE_I2C_CFG[0]); 
    mikrobus_logInit(_MIKROBUS2, 9600); 
    Delay_100ms(); 

end;

procedure applicationInit(); 
begin

    altitude_i2cDriverInit(T_ALTITUDE_P(@_MIKROBUS1_GPIO), T_ALTITUDE_P(@_MIKROBUS1_I2C), _ALTITUDE_I2C_ADDRESS); 
    altitude_defaultConfigAltitude(); 
    if ((altitude_readData(_ALTITUDE_WHO_AM_I) = _ALTITUDE_DEVICA_ID)) then 
    begin
        mikrobus_logWrite('    Altitude Click', _LOG_LINE); 
    end
    else 
    begin
        mikrobus_logWrite('          ERROR', _LOG_LINE); 
    end;
    mikrobus_logWrite('-------------------------', _LOG_LINE); 
    Delay_1sec(); 
    Delay_1sec(); 
    Delay_1sec(); 

end;

procedure applicationTask(); 
begin

    altitude := altitude_getAltitude(); 
    Delay_100ms(); 
    FloatToStr(altitude, logText); 
    mikrobus_logWrite(' Altitude:    ', _LOG_TEXT); 
    mikrobus_logWrite(logText, _LOG_TEXT); 
    mikrobus_logWrite(' m', _LOG_LINE); 
    mikrobus_logWrite('-------------------------', _LOG_LINE); 
    Delay_1sec(); 
    Delay_1sec(); 
    Delay_1sec(); 
    Delay_1sec(); 
    Delay_1sec(); 

end;

begin

    systemInit(); 
    applicationInit(); 
    while (1) do 
    begin 
        applicationTask(); 
    end;

end.